{"ast":null,"code":"import _classCallCheck from \"/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/src/javascript/components/drawableCanvas.jsx\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport assign from 'object-assign';\n\nvar DrawableCanvas =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(DrawableCanvas, _Component);\n\n  function DrawableCanvas() {\n    _classCallCheck(this, DrawableCanvas);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(DrawableCanvas).apply(this, arguments));\n  }\n\n  _createClass(DrawableCanvas, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var canvas = ReactDOM.findDOMNode(this);\n      canvas.style.width = '100%';\n      canvas.style.height = '100%';\n      canvas.width = canvas.offsetWidth;\n      canvas.height = canvas.offsetHeight;\n      var context = canvas.getContext('2d');\n      this.setState({\n        canvas: canvas,\n        context: context\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.clear) {\n        this.resetCanvas();\n      }\n    }\n  }, {\n    key: \"handleOnTouchStart\",\n    value: function handleOnTouchStart(e) {\n      var rect = this.state.canvas.getBoundingClientRect();\n      this.state.context.beginPath();\n      this.setState({\n        lastX: e.targetTouches[0].pageX - rect.left,\n        lastY: e.targetTouches[0].pageY - rect.top,\n        drawing: true\n      });\n    }\n  }, {\n    key: \"handleOnMouseDown\",\n    value: function handleOnMouseDown(e) {\n      var rect = this.state.canvas.getBoundingClientRect();\n      this.state.context.beginPath();\n      this.setState({\n        lastX: e.clientX - rect.left,\n        lastY: e.clientY - rect.top,\n        drawing: true\n      });\n    }\n  }, {\n    key: \"handleOnTouchMove\",\n    value: function handleOnTouchMove(e) {\n      if (this.state.drawing) {\n        var rect = this.state.canvas.getBoundingClientRect();\n        var lastX = this.state.lastX;\n        var lastY = this.state.lastY;\n        var currentX = e.targetTouches[0].pageX - rect.left;\n        var currentY = e.targetTouches[0].pageY - rect.top;\n        this.draw(lastX, lastY, currentX, currentY);\n        this.setState({\n          lastX: currentX,\n          lastY: currentY\n        });\n      }\n    }\n  }, {\n    key: \"handleOnMouseMove\",\n    value: function handleOnMouseMove(e) {\n      if (this.state.drawing) {\n        var rect = this.state.canvas.getBoundingClientRect();\n        var lastX = this.state.lastX;\n        var lastY = this.state.lastY;\n        var currentX = e.clientX - rect.left;\n        var currentY = e.clientY - rect.top;\n        this.draw(lastX, lastY, currentX, currentY);\n        this.setState({\n          lastX: currentX,\n          lastY: currentY\n        });\n      }\n    }\n  }, {\n    key: \"handleonMouseUp\",\n    value: function handleonMouseUp() {\n      this.setState({\n        drawing: false\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(lX, lY, cX, cY) {\n      var newContext = this.state.context;\n      newContext.strokeStyle = this.props.brushColor;\n      newContext.lineWidth = this.props.lineWidth;\n      this.setState({\n        context: newContext\n      });\n      this.state.context.moveTo(lX, lY);\n      this.state.context.lineTo(cX, cY);\n      this.state.context.stroke();\n    }\n  }, {\n    key: \"resetCanvas\",\n    value: function resetCanvas() {\n      var width = this.state.context.canvas.width;\n      var height = this.state.context.canvas.height;\n      this.state.context.clearRect(0, 0, width, height);\n    }\n  }, {\n    key: \"canvasStyle\",\n    value: function canvasStyle(color) {\n      var defaults = DrawableCanvas.getDefaultStyle(color);\n      var custom = this.props.canvasStyle;\n      return assign({}, defaults, custom);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"canvas\", {\n        style: this.canvasStyle(this.props.color),\n        onMouseDown: this.handleOnMouseDown.bind(this),\n        onTouchStart: this.handleOnTouchStart.bind(this),\n        onMouseMove: this.handleOnMouseMove.bind(this),\n        onTouchMove: this.handleOnTouchMove.bind(this),\n        onMouseUp: this.handleonMouseUp.bind(this),\n        onTouchEnd: this.handleonMouseUp.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      });\n    }\n  }], [{\n    key: \"getDefaultStyle\",\n    value: function getDefaultStyle(color) {\n      console.log(color);\n      return {\n        brushColor: \"#18FF33\",\n        lineWidth: 8,\n        cursor: 'pointer',\n        canvasStyle: {\n          backgroundColor: '#00FFDC'\n        },\n        clear: false\n      };\n    }\n  }]);\n\n  return DrawableCanvas;\n}(Component);\n\nDrawableCanvas.propTypes = {\n  brushColor: PropTypes.string,\n  lineWidth: PropTypes.number,\n  cursor: PropTypes.string,\n  canvasStyle: PropTypes.shape({\n    backgroundColor: PropTypes.string\n  }),\n  clear: PropTypes.bool\n};\nexport default DrawableCanvas;","map":{"version":3,"sources":["/Users/calumbruton/Documents/EVERYTHING-PROGRAMMING/Personal-Projects/pictochat/Frontend/src/javascript/components/drawableCanvas.jsx"],"names":["React","Component","ReactDOM","PropTypes","assign","DrawableCanvas","canvas","findDOMNode","style","width","height","offsetWidth","offsetHeight","context","getContext","setState","nextProps","clear","resetCanvas","e","rect","state","getBoundingClientRect","beginPath","lastX","targetTouches","pageX","left","lastY","pageY","top","drawing","clientX","clientY","currentX","currentY","draw","lX","lY","cX","cY","newContext","strokeStyle","props","brushColor","lineWidth","moveTo","lineTo","stroke","clearRect","color","defaults","getDefaultStyle","custom","canvasStyle","handleOnMouseDown","bind","handleOnTouchStart","handleOnMouseMove","handleOnTouchMove","handleonMouseUp","console","log","cursor","backgroundColor","propTypes","string","number","shape","bool"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport assign from 'object-assign'\n\nclass DrawableCanvas extends Component {\n\n  componentDidMount(){\n    const canvas = ReactDOM.findDOMNode(this);\n\n    canvas.style.width = '100%';\n    canvas.style.height = '100%';\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n\n    const context = canvas.getContext('2d');\n\n    this.setState({\n      canvas,\n      context\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.clear){\n      this.resetCanvas();\n    }\n  }\n\n  static getDefaultStyle(color) {\n    console.log(color)\n    return {\n      brushColor: \"#18FF33\",\n      lineWidth: 8,\n      cursor: 'pointer',\n      canvasStyle: {\n        backgroundColor: '#00FFDC'\n      },\n      clear: false\n    };\n  }\n\n  handleOnTouchStart (e) {\n    const rect = this.state.canvas.getBoundingClientRect();\n    this.state.context.beginPath();\n    this.setState({\n      lastX: e.targetTouches[0].pageX - rect.left,\n      lastY: e.targetTouches[0].pageY - rect.top,\n      drawing: true\n    });\n  }\n\n  handleOnMouseDown(e){\n    const rect = this.state.canvas.getBoundingClientRect();\n    this.state.context.beginPath();\n\n    this.setState({\n      lastX: e.clientX - rect.left,\n      lastY: e.clientY - rect.top,\n      drawing: true\n    });\n  }\n\n  handleOnTouchMove (e) {\n    if (this.state.drawing) {\n      const rect = this.state.canvas.getBoundingClientRect();\n      const lastX = this.state.lastX;\n      const lastY = this.state.lastY;\n      let currentX = e.targetTouches[0].pageX - rect.left;\n      let currentY = e.targetTouches[0].pageY - rect.top;\n      this.draw(lastX, lastY, currentX, currentY);\n      this.setState({\n        lastX: currentX,\n        lastY: currentY\n      });\n    }\n  }\n\n  handleOnMouseMove(e){\n    if(this.state.drawing){\n      const rect = this.state.canvas.getBoundingClientRect();\n      const lastX = this.state.lastX;\n      const lastY = this.state.lastY;\n      let currentX = e.clientX - rect.left;\n      let currentY = e.clientY - rect.top;\n\n      this.draw(lastX, lastY, currentX, currentY);\n      this.setState({\n        lastX: currentX,\n        lastY: currentY\n      });\n    }\n  }\n\n  handleonMouseUp() {\n    this.setState({\n      drawing: false\n    });\n  }\n\n  draw(lX, lY, cX, cY) {\n    const newContext = this.state.context;\n    newContext.strokeStyle = this.props.brushColor;\n    newContext.lineWidth = this.props.lineWidth;\n    this.setState({\n      context: newContext\n    });\n    this.state.context.moveTo(lX, lY);\n    this.state.context.lineTo(cX, cY);\n    this.state.context.stroke();\n  }\n\n  resetCanvas(){\n    const width = this.state.context.canvas.width;\n    const height = this.state.context.canvas.height;\n    this.state.context.clearRect(0, 0, width, height);\n  }\n\n  canvasStyle(color){\n    const defaults = DrawableCanvas.getDefaultStyle(color);\n    const custom = this.props.canvasStyle;\n\n    return assign({}, defaults, custom);\n  }\n\n  render() {\n    return (\n      <canvas style = {this.canvasStyle(this.props.color)}\n        onMouseDown = {this.handleOnMouseDown.bind(this)}\n        onTouchStart = {this.handleOnTouchStart.bind(this)}\n        onMouseMove = {this.handleOnMouseMove.bind(this)}\n        onTouchMove = {this.handleOnTouchMove.bind(this)}\n        onMouseUp = {this.handleonMouseUp.bind(this)}\n        onTouchEnd = {this.handleonMouseUp.bind(this)}\n      >\n      </canvas>\n    );\n  }\n\n}\n\nDrawableCanvas.propTypes = {\n  brushColor: PropTypes.string,\n  lineWidth: PropTypes.number,\n  cursor: PropTypes.string,\n  canvasStyle: PropTypes.shape({\n    backgroundColor: PropTypes.string\n  }),\n  clear: PropTypes.bool\n};\n\nexport default DrawableCanvas;"]},"metadata":{},"sourceType":"module"}